"""
Test Installation - Verificador de instalaci√≥n del sistema BCI
Prueba que todas las dependencias est√©n instaladas correctamente
"""

import sys
import importlib

def test_imports():
    """Prueba la importaci√≥n de todas las dependencias"""
    required_modules = [
        'numpy',
        'pandas', 
        'matplotlib',
        'scipy',
        'pygame',
        'cv2',
        'time',
        'threading',
        'queue',
        'collections',
        'math',
        'random'
    ]
    
    print("üîç Verificando dependencias...")
    print("="*50)
    
    failed_imports = []
    
    for module in required_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module:<15} - OK")
        except ImportError as e:
            print(f"‚ùå {module:<15} - FALTA: {e}")
            failed_imports.append(module)
    
    return failed_imports

def test_project_modules():
    """Prueba la importaci√≥n de m√≥dulos del proyecto"""
    print("\nüß† Verificando m√≥dulos del proyecto...")
    print("="*50)
    
    project_modules = [
        'eeg_data_generator',
        'eeg_signal_processor',
        'bci_visual_interface'
    ]
    
    failed_modules = []
    
    for module in project_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module:<25} - OK")
        except ImportError as e:
            print(f"‚ùå {module:<25} - ERROR: {e}")
            failed_modules.append(module)
    
    return failed_modules

def test_basic_functionality():
    """Prueba funcionalidad b√°sica de los componentes"""
    print("\n‚öôÔ∏è Probando funcionalidad b√°sica...")
    print("="*50)
    
    try:
        # Test generador EEG
        from eeg_data_generator import EEGDataGenerator
        generator = EEGDataGenerator(sampling_rate=256, duration=2)
        test_signal = generator.generate_attention_state('neutral')
        print(f"‚úÖ Generador EEG      - {len(test_signal)} muestras generadas")
        
        # Test procesador
        from eeg_signal_processor import EEGSignalProcessor
        processor = EEGSignalProcessor(sampling_rate=256)
        features = processor.calculate_spectral_features(test_signal)
        print(f"‚úÖ Procesador EEG     - {len(features)} caracter√≠sticas extra√≠das")
        
        # Test pygame (sin inicializar ventana)
        import pygame
        pygame.init()
        pygame.quit()
        print("‚úÖ Pygame            - Inicializaci√≥n exitosa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en funcionalidad: {e}")
        return False

def test_performance():
    """Prueba b√°sica de rendimiento"""
    print("\nüìä Evaluando rendimiento...")
    print("="*50)
    
    try:
        import time
        import numpy as np
        from eeg_data_generator import EEGDataGenerator
        from eeg_signal_processor import EEGSignalProcessor
        
        # Test de velocidad de generaci√≥n
        start_time = time.time()
        generator = EEGDataGenerator(sampling_rate=256, duration=5)
        signal = generator.generate_attention_state('focused')
        generation_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Generaci√≥n EEG     - {generation_time:.3f}s para 5s de datos")
        
        # Test de velocidad de procesamiento
        start_time = time.time()
        processor = EEGSignalProcessor(sampling_rate=256)
        features = processor.calculate_spectral_features(signal)
        processing_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Procesamiento      - {processing_time:.3f}s para an√°lisis completo")
        
        # Evaluaci√≥n
        if generation_time < 1.0 and processing_time < 2.0:
            print("‚úÖ Rendimiento        - EXCELENTE")
        elif generation_time < 2.0 and processing_time < 5.0:
            print("‚ö†Ô∏è Rendimiento        - ACEPTABLE")
        else:
            print("‚ùå Rendimiento        - LENTO (puede afectar tiempo real)")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de rendimiento: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üß† VERIFICADOR DE INSTALACI√ìN - SISTEMA BCI")
    print("="*70)
    print(f"üêç Python {sys.version}")
    print(f"üíª Plataforma: {sys.platform}")
    print("="*70)
    
    # Test 1: Dependencias
    failed_imports = test_imports()
    
    # Test 2: M√≥dulos del proyecto
    failed_modules = test_project_modules()
    
    # Test 3: Funcionalidad b√°sica
    functionality_ok = test_basic_functionality()
    
    # Test 4: Rendimiento
    performance_ok = test_performance()
    
    # Resumen final
    print("\nüéØ RESUMEN DE VERIFICACI√ìN")
    print("="*70)
    
    if not failed_imports and not failed_modules and functionality_ok and performance_ok:
        print("üéâ ¬°INSTALACI√ìN COMPLETAMENTE EXITOSA!")
        print("‚úÖ Todas las dependencias instaladas")
        print("‚úÖ Todos los m√≥dulos funcionando")
        print("‚úÖ Funcionalidad b√°sica operativa")
        print("‚úÖ Rendimiento adecuado")
        print("\nüöÄ El sistema BCI est√° listo para usar!")
        print("\nüìã COMANDOS DISPONIBLES:")
        print("python main_bci_system.py       - Sistema completo autom√°tico")
        print("python demo_interactive.py      - Demo interactivo manual")
        print("python bci_visual_interface.py  - Solo interfaz visual")
        
    else:
        print("‚ö†Ô∏è INSTALACI√ìN INCOMPLETA")
        
        if failed_imports:
            print(f"‚ùå Dependencias faltantes: {', '.join(failed_imports)}")
            print("üí° Ejecuta: pip install -r requirements.txt")
        
        if failed_modules:
            print(f"‚ùå M√≥dulos con problemas: {', '.join(failed_modules)}")
            print("üí° Verifica que est√©s en el directorio correcto")
        
        if not functionality_ok:
            print("‚ùå Problemas en funcionalidad b√°sica")
        
        if not performance_ok:
            print("‚ùå Problemas de rendimiento detectados")
        
        print("\nüîß SOLUCIONES:")
        print("1. pip install -r requirements.txt")
        print("2. Verifica estar en: .../python/")
        print("3. Reinicia el terminal")
        print("4. Ejecuta este test nuevamente")

if __name__ == "__main__":
    main() 