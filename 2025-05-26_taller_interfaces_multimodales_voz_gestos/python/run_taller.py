#!/usr/bin/env python3
"""
üöÄ Launcher - Taller de Interfaces Multimodales
Script de inicio que facilita la ejecuci√≥n del taller con diferentes opciones.
"""

import sys
import os
import subprocess

def show_banner():
    """Muestra el banner del taller"""
    print("üß™" + "="*58 + "üß™")
    print("üß™  TALLER - INTERFACES MULTIMODALES: UNIENDO VOZ Y GESTOS  üß™")
    print("üß™" + "="*58 + "üß™")
    print()
    print("üéØ Objetivo: Fusionar gestos y comandos de voz para crear")
    print("   una experiencia de interacci√≥n multimodal rica e intuitiva")
    print()

def show_menu():
    """Muestra el men√∫ principal"""
    print("üìã OPCIONES DISPONIBLES:")
    print("=" * 30)
    print("1. üß™ Ejecutar Taller Principal")
    print("2. üîß Instalar Dependencias")
    print("3. üß™ Probar Sistema")
    print("4. üéØ Entrenador de Gestos")
    print("5. ‚ÑπÔ∏è  Informaci√≥n del Sistema")
    print("6. üÜò Ayuda y Documentaci√≥n")
    print("7. üö™ Salir")
    print()

def run_main_workshop():
    """Ejecuta el taller principal"""
    print("üöÄ Iniciando Taller Principal...")
    try:
        subprocess.run([sys.executable, "main.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando el taller: {e}")
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ main.py")
        print("üí° Aseg√∫rate de estar en el directorio correcto")

def install_dependencies():
    """Ejecuta el instalador de dependencias"""
    print("üì¶ Iniciando Instalador de Dependencias...")
    try:
        subprocess.run([sys.executable, "install_dependencies.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en instalaci√≥n: {e}")
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ install_dependencies.py")

def test_system():
    """Ejecuta las pruebas del sistema"""
    print("üß™ Iniciando Pruebas del Sistema...")
    try:
        subprocess.run([sys.executable, "test_system.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en pruebas: {e}")
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ test_system.py")

def gesture_trainer():
    """Ejecuta el entrenador de gestos"""
    print("üéØ Iniciando Entrenador de Gestos...")
    try:
        subprocess.run([sys.executable, "gesture_trainer.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en entrenador: {e}")
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ gesture_trainer.py")

def show_system_info():
    """Muestra informaci√≥n del sistema"""
    print("‚ÑπÔ∏è  INFORMACI√ìN DEL SISTEMA")
    print("=" * 30)
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ Directorio: {os.getcwd()}")
    print(f"üíª Plataforma: {sys.platform}")
    
    # Verificar archivos principales
    files_to_check = [
        "main.py", "requirements.txt", "install_dependencies.py",
        "test_system.py", "gesture_trainer.py"
    ]
    
    print("\nüìÑ Archivos del Proyecto:")
    for file in files_to_check:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"‚úÖ {file} ({size} bytes)")
        else:
            print(f"‚ùå {file} (no encontrado)")
    
    # Verificar dependencias b√°sicas
    print("\nüì¶ Dependencias Principales:")
    dependencies = ["cv2", "mediapipe", "speech_recognition", "pygame", "numpy", "pyttsx3"]
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep}")
    
    print()

def show_help():
    """Muestra ayuda y documentaci√≥n"""
    print("üÜò AYUDA Y DOCUMENTACI√ìN")
    print("=" * 30)
    print()
    print("üéÆ CONTROLES MULTIMODALES:")
    print("‚Ä¢ Mano abierta + 'cambiar' ‚Üí Cambiar color")
    print("‚Ä¢ Dos dedos + 'mover' ‚Üí Activar movimiento")
    print("‚Ä¢ Pu√±o + 'rotar' ‚Üí Activar rotaci√≥n")
    print("‚Ä¢ Gesto OK + 'mostrar' ‚Üí Ver estad√≠sticas")
    print()
    print("üó£Ô∏è  COMANDOS DE VOZ:")
    print("‚Ä¢ cambiar, mover, rotar, mostrar")
    print("‚Ä¢ azul, rojo, verde, amarillo")
    print("‚Ä¢ parar, reset, salir")
    print()
    print("üîß SOLUCI√ìN DE PROBLEMAS:")
    print("‚Ä¢ C√°mara no funciona ‚Üí Cerrar otras apps que usen c√°mara")
    print("‚Ä¢ Micr√≥fono no funciona ‚Üí Verificar permisos")
    print("‚Ä¢ PyAudio error ‚Üí pip install pipwin && pipwin install pyaudio")
    print("‚Ä¢ Rendimiento lento ‚Üí Cerrar otras aplicaciones")
    print()
    print("üìö ESTRUCTURA DEL PROYECTO:")
    print("‚Ä¢ main.py ‚Üí Aplicaci√≥n principal")
    print("‚Ä¢ test_system.py ‚Üí Pruebas del sistema")
    print("‚Ä¢ gesture_trainer.py ‚Üí Entrenar gestos personalizados")
    print("‚Ä¢ install_dependencies.py ‚Üí Instalar dependencias")
    print("‚Ä¢ requirements.txt ‚Üí Lista de dependencias")
    print()

def quick_start():
    """Inicio r√°pido para usuarios experimentados"""
    print("‚ö° INICIO R√ÅPIDO")
    print("=" * 20)
    print("1. Ejecutando pruebas autom√°ticas...")
    
    # Prueba r√°pida
    try:
        result = subprocess.run([sys.executable, "test_system.py", "--quick"], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Pruebas b√°sicas exitosas")
            print("2. Iniciando taller...")
            run_main_workshop()
        else:
            print("‚ùå Pruebas fallaron")
            print("üí° Usa el men√∫ para instalar dependencias")
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout en pruebas")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """Funci√≥n principal del launcher"""
    show_banner()
    
    # Verificar si estamos en el directorio correcto
    if not os.path.exists("main.py"):
        print("‚ùå Error: No se encontr√≥ main.py")
        print("üí° Aseg√∫rate de ejecutar este script desde el directorio python/")
        return
    
    # Modo inicio r√°pido
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        quick_start()
        return
    
    while True:
        show_menu()
        try:
            choice = input("Selecciona una opci√≥n (1-7): ").strip()
            
            if choice == '1':
                run_main_workshop()
            elif choice == '2':
                install_dependencies()
            elif choice == '3':
                test_system()
            elif choice == '4':
                gesture_trainer()
            elif choice == '5':
                show_system_info()
            elif choice == '6':
                show_help()
            elif choice == '7':
                print("üëã ¬°Gracias por usar el taller!")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida. Selecciona 1-7.")
            
            print("\n" + "="*50)
            input("Presiona Enter para continuar...")
            print()
            
        except KeyboardInterrupt:
            print("\nüëã ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    main() 